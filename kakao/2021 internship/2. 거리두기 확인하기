from collections import deque

dx1 = [-1, 1, 0, 0]
dy1 = [0, 0, -1, 1]

dx2 = [-2, 2, 0, 0]
dy2 = [0, 0, -2, 2]

dx3 = [-1, -1, 1, 1]
dy3 = [-1, 1, -1, 1]

def possible(place, x, y):
    for i in range(4):
        nx = x + dx1[i]
        ny = y + dy1[i]
        if 0 <= nx < 5 and 0 <= ny < 5:
            if place[nx][ny] == "P":
                return False
            
    for i in range(4):
        nx = x + dx2[i]
        ny = y + dy2[i]
        if 0 <= nx < 5 and 0 <= ny < 5:
            if place[nx][ny] == "P" and place[x + dx2[i] // 2][y + dy2[i] // 2] != "X":
                return False
            
    for i in range(4):
        nx = x + dx3[i]
        ny = y + dy3[i]
        if 0 <= nx < 5 and 0 <= ny < 5:
            if place[nx][ny] == "P" and (place[nx][y] != "X" or place[x][ny] != "X"):
                return False
            
def solution(places):
    answer = []
    for data in places:
        place = []
        check = True
        for d in data:
            place.append(list(d))
        for i in range(5):
            for j in range(5):
                if place[i][j] == "P" and check == True:
                    if possible(place, i, j) == False:
                        check = False
        if check == False:
            answer.append(0)
        else:
            answer.append(1)
    return answer
    
======================================================================================================

from collections import deque

def bfs(p):
    start = []
    
    for i in range(5): # 시작점이 되는 P 좌표 구하기
        for j in range(5):
            if p[i][j] == 'P':
                start.append([i, j])
    
    for s in start:
        queue = deque([s])  # 큐에 초기값
        visited = [[0]*5 for i in range(5)]   # 방문 처리 리스트
        distance = [[0]*5 for i in range(5)]  # 경로 길이 리스트
        visited[s[0]][s[1]] = 1
        
        while queue:
            y, x = queue.popleft()
            if distance[y][x] > 2:
                continue
                
            dx = [-1, 1, 0, 0]  # 좌우
            dy = [0, 0, -1, 1]  # 상하

            for i in range(4):
                nx = x + dx[i]
                ny = y + dy[i]

                if 0<=nx<5 and 0<=ny<5 and visited[ny][nx] == 0:
                    
                    if p[ny][nx] == 'O':
                        distance[ny][nx] = distance[y][x] + 1
                        queue.append([ny, nx])
                        visited[ny][nx] = 1
                    
                    if p[ny][nx] == 'P' and distance[y][x] <= 1:
                        return 0
    return 1


def solution(places):
    answer = []
    
    for i in places:
        answer.append(bfs(i))
    
    return answer
